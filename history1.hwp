☆☆☆☆☆☆☆☆☆☆

전공수업(운영체제)에서 직접 배운 내용을 토대로 작성한 내용입니다. 1장은 운영체제의 역사를 다루고 있습니다. 운영체제의 역사와 더불어 spooling, timesharing, dispatch와 같은 주요 용어들을 다루고 있으므로 이들을 중점으로 정리하였습니다.

☆☆☆☆☆☆☆☆☆☆

​

​

1. 1st(1세대) : 진공관과 플러그보드

플러그보드를 컴퓨터에 삽입함,

punched card를 사용

​

2. 2세대 : 진공관과 배치시스템

디자이너, 설계자, 수행자, 프로그래머, 관리자로 구분됨(1st에서는 한 집단이 다함)

card deck을 가져옴

​

Batch System

프로그램 10개를 다 모아서 컴퓨터가 수행하도록 함

card reader에서 읽어들여서 tape drive에 저장함

7094 머신에서 "하나씩 차례대로" 수행됨

1st job이 끝나면 2nd job을 수행함

$JOB : 프로그램의 시작

$LOAD : executable code를 메모리로 load 함

​

3. 3세대 : IC와 멀티프로그래밍

① 수치 계산 ② 산업용

단점 : OS가 너무 복잡하고 거대함

멀티프로그래밍

수행 도중 입출력 발생 가능 → CPU가 idle하게 됨(입출력 작업중 CPU는 idle함)

번갈아 가면서 job 수행, partitioning을 한다.

​

Spooling : 새로운 job을 디스크로부터 읽어서 방금 빈 메모리 영역으로 적재하고 실행시킴

옛날 : job이 오면 10개의 job을 하나의 테이프에다 모음

Spool : job들을 테이프에다 X, disk로 바로 보냄

연산시 disk로부터 읽음(테이프 아님),병렬적으로 printer에 수행됨

​

Timesharing 

프로그래머 → card deck에다 코딩 → 제출함

연산하는 컴퓨터 수행 독점하지 못함(시간이 오래 걸림)

여러 사람들의 job를 수행 → 출력(확인)

1세대 시간 예약 → 컴퓨터 독점가능 → Timesharing system

​

각 사용자가 한 online terminal을 가진다.(하나의 machine을 독점하는 느낌)

mainframe의 CPU가 조금씩 돌아가면서 수행함 → Timesharing

​

MULTICS : timesharing 시스템이다. 몇백명의 동시 timesharing user를 support한다. 

Minicomputers : IC소자가 작아짐

UNIX : Ken Thomason에 의해 개발됨

LINUX : Linus Torvalds에 의해 개발됨

​

PLUS) 배치 시스템 : 외부로부터 입력되는 일련의 데이터들을 모아 두었다가 일정한 시간이 되면 이들 데이터들을 한 곳에 모아 작업들을 미리 정해진 순서에 따라 차레대로 처리하는 시스템

Spooling : Simultaneous Peripheral Operation On Line

(동시에 입출력)

​

GUI 문자로 명령을 내림

① network OS : 사용자가 컴퓨터의 존재를 알고 있음

② distributed OS : 사용자가 machine의 존재에 대해서 모르고 사용

거대한 컴퓨터를 사용한다는 생각으로 자신의 프로그램이 A라는 컴퓨터에서 수행되는지 B라는 컴퓨터에서 수행되는지 모름

​

System Calls


① Kernel Mode ② 유저(사용자) 모드

PSW(Program Status Word)의 한 비트가 모드를 컨트롤한다.

커널 모드 수행(OS) → 자기의 instruction set에 있는 모든 명령을 수행한다.

유저 모드 수행 →  부분집합(일부분)만 수행이 가능하다.

trap : 유저 모드 →  커널 모드로 전환시킴

메모리의 특정 주소로 jump가 일어난다.

work가 끝나면 다시 user program으로 돌아온다. 

trap ,system call : OS로 제어가 넘어간다.

​

시스템 콜은 프로시저 콜과 유사하다.

차이점 : 시스템 콜은 커널 모드에서 수행, 프로시저 콜은 계속 user 모드에서 수행(모드가 바뀌지 않는다)

library procedure read : 보통 assembly어로 작성(assembly어로만 가능)

User prgram calling read : C로 작성 → 컴파일 되면 기계어로

​

dispatch

read system call에 대한 number임을 알아차린다.

system call number를 오른쪽 테이블의 인덱스로 씀

table entry → System call handler에 대한 "주소"를 가짐

주소로 점프 → System call handler 코드가 있음 → "read" system call을 처리

​

return to caller → user program calling read로 넘어감

POSIX : 100개의 프로시저 call을 가짐

fork() : parent process와 똑같은 자식 process를 생성

다양한 process 관리 system call

​

★핵심 포인트 

System Call이 어떻게 수행되는지 과정을 잘 알아두기
